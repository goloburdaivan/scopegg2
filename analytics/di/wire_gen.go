// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	config2 "github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/hibiken/asynq"
	"scopegg2-analytics/internal/config"
	"scopegg2-analytics/internal/handlers"
	"scopegg2-analytics/internal/readers"
	"scopegg2-analytics/internal/services"
	"scopegg2-infra/taskqueue/queue/redis"
)

// Injectors from wire.go:

func InitializeAnalyticsHandler() (*handlers.AnalyticsHandler, error) {
	configConfig := config.InitConfig()
	client := newRedisClient(configConfig)
	taskQueue := redis.NewRedisTaskQueue(client)
	awsConfig, err := newAWSConfig()
	if err != nil {
		return nil, err
	}
	s3Client := newS3Client(awsConfig)
	demoReader := readers.NewS3DemoReader(s3Client, configConfig)
	demoProcessor := services.NewDemoInfoCsDemoProcessor(demoReader)
	analyticsHandler := handlers.NewAnalyticsHandler(taskQueue, demoProcessor)
	return analyticsHandler, nil
}

// wire.go:

func newRedisClient(cfg *config.Config) *asynq.Client {
	return asynq.NewClient(asynq.RedisClientOpt{
		Addr: cfg.RedisUrl,
	})
}

func newAWSConfig() (aws.Config, error) {
	return config2.LoadDefaultConfig(context.TODO())
}

func newS3Client(cfg aws.Config) *s3.Client {
	return s3.NewFromConfig(cfg)
}
